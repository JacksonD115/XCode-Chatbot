import UIKit

class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    var tableView: UITableView!
    var messageTextField: UITextField!
    var sendButton: UIButton!
    var chatHistory: [String] = []

    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        tableView.dataSource = self
        tableView.delegate = self
    }

    func setupUI() {
        // Initialize and set up the table view
        tableView = UITableView()
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: "ChatCell")
        view.addSubview(tableView)

        // Initialize and set up the text field
        messageTextField = UITextField()
        messageTextField.borderStyle = .roundedRect
        messageTextField.placeholder = "Enter your message"
        messageTextField.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(messageTextField)

        // Initialize and set up the button
        sendButton = UIButton(type: .system)
        sendButton.setTitle("Send", for: .normal)
        sendButton.addTarget(self, action: #selector(sendButtonTapped), for: .touchUpInside)
        sendButton.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(sendButton)

        // Set up constraints
        NSLayoutConstraint.activate([
            // Table view constraints
            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: messageTextField.topAnchor, constant: -8),

            // Text field constraints
            messageTextField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            messageTextField.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -16),
            messageTextField.trailingAnchor.constraint(equalTo: sendButton.leadingAnchor, constant: -8),
            messageTextField.heightAnchor.constraint(equalToConstant: 44),

            // Button constraints
            sendButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            sendButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -16),
            sendButton.widthAnchor.constraint(equalToConstant: 60),
            sendButton.heightAnchor.constraint(equalToConstant: 44)
        ])
    }

    @objc func sendButtonTapped() {
        sendMessage()
    }

    func sendMessage() {
        guard let userInput = messageTextField.text, !userInput.isEmpty else { return }
        chatHistory.append("You: \(userInput)")
        tableView.reloadData()
        fetchResponse(for: userInput)
        messageTextField.text = ""
    }

    func fetchResponse(for message: String) {
        let openAIService = OpenAIService()
        openAIService.getResponse(for: message) { response in
            DispatchQueue.main.async {
                if let response = response {
                    self.chatHistory.append("Bot: \(response)") // You can name the bot whatever you like 
                } else {
                    self.chatHistory.append("Bot: Sorry, I couldn't understand that.") // You can name the bot whatever you like 
                }
                self.tableView.reloadData()
            }
        }
    }

    // UITableViewDataSource Methods
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return chatHistory.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ChatCell", for: indexPath)
        cell.textLabel?.text = chatHistory[indexPath.row]
        cell.textLabel?.numberOfLines = 0
        return cell
    }

    // UITableViewDelegate Method
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let text = chatHistory[indexPath.row]
        let padding: CGFloat = 20
        let textHeight = text.height(withConstrainedWidth: tableView.frame.width - padding, font: UIFont.systemFont(ofSize: 17))
        return textHeight + padding
    }
}

// Extension to calculate text height based on width and font
extension String {
    func height(withConstrainedWidth width: CGFloat, font: UIFont) -> CGFloat {
        let constraintRect = CGSize(width: width, height: .greatestFiniteMagnitude)
        let boundingBox = self.boundingRect(with: constraintRect, options: .usesLineFragmentOrigin, attributes: [.font: font], context: nil)
        return ceil(boundingBox.height)
    }
}
